#include <stdio.h>

typedef struct {
    int id;
    int period;
    int exectime;
    int executed;    // Time executed in current instance
    int next_deadline; // Absolute deadline of current job
} Task;

int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

int main() {
    int n;
    printf("Enter number of tasks: ");
    scanf("%d", &n);

    Task tasks[n];
    printf("Enter id, period, and execution time for each task:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d %d", &tasks[i].id, &tasks[i].period, &tasks[i].exectime);
        tasks[i].executed = 0;
        tasks[i].next_deadline = tasks[i].period;
    }

    // Calculate hyperperiod
    int hyperperiod = tasks[0].period;
    for (int i = 1; i < n; i++) {
        hyperperiod = lcm(hyperperiod, tasks[i].period);
    }

    // EDF Scheduling Simulation
    for (int t = 0; t < hyperperiod; t++) {
        // Release new jobs if period elapsed
        for (int i = 0; i < n; i++) {
            if (t % tasks[i].period == 0) {
                tasks[i].executed = 0;
                tasks[i].next_deadline = t + tasks[i].period;
            }
        }

        // Choose the task with the earliest deadline
        int current = -1;
        for (int i = 0; i < n; i++) {
            if (tasks[i].executed < tasks[i].exectime) {
                if (current == -1 || tasks[i].next_deadline < tasks[current].next_deadline) {
                    current = i;
                }
            }
        }

        // Execute selected task or stay idle
        if (current != -1) {
            tasks[current].executed++;
            printf("Time %3d: Task %d\n", t + 1, tasks[current].id);
        } else {
            printf("Time %3d: Idle\n", t + 1);
        }
    }

    return 0;
}


O/P:
Enter no of tasks:2
Enter period and execution time for each task:
4 1
5 2
Time 0: task 0
Time 1: task 1
Time 2: task 1
Time 3: Idle
Time 4: task 0
Time 5: task 1
Time 6: task 1
Time 7: Idle
Time 8: task 0
Time 9: Idle
Time 10: task 1
Time 11: task 1
Time 12: task 0
Time 13: Idle
Time 14: Idle
Time 15: task 1
Time 16: task 0
Time 17: task 1
Time 18: Idle
Time 19: Idle
